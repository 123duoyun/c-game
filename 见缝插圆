// Charper6.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//
#include"graphics.h"
#include <iostream>
#include "conio.h"

void initEasyxWindows(int width, int heigh);//初始化EasyX窗口
void drawCircleMode1(float x, float y, float r);
void drawCircleMode2(float x, float y, float r);
void drawCircleMode3(float x, float y, float r);
void drawCircleMode4(float x, float y, float r);

int * ff(int circleNum, int drawMode);
bool isTwoCirclesIntersect(float x1, float y1, float r1, float x2, float y2, float r2);//两圆是否相交
float countTwoPointDis(float x1, float y1, float x2, float y2);//两点间的距离
void updateWindows(int width, int heigh);//更新绘画圆的操作
int  creatBigCircle(int rmax, int circleNum, float x, float y, int xArray[100], int yArray[100], int rArray[100]);//创建最大的不相交圆
int  creatRandCircle(int circleNum, float x, float y, int r, int xArray[100], int yArray[100], int rArray[100]);//随机创建不相交圆

int main()
{
    int width = 600; // 窗口宽度
    int height = 600; // 窗口高度
    initEasyxWindows(width, height);
    updateWindows(width, height);
    _getch();	// 等待按键输入
    closegraph();  // 关闭窗口
    return 0;
    //std::cout << "Hello World!\n";
}
void initEasyxWindows(int width, int height)
{
    initgraph(width, height); // 新开一个窗口
    setbkcolor(RGB(255, 255, 255)); // 背景颜色为白色
    cleardevice(); // 以背景颜色清空背景
    srand(time(0));  // 随机种子函数
}

/// <summary>
/// 随机创建一个圆，如果与已有的圆都不相交，返回1，否则返回0
/// </summary>
/// <param name="circleNum">已有的圆数量</param>
/// <param name="x">圆心的X坐标</param>
/// <param name="y">圆心的Y坐标</param>
/// <param name="r"></param>

/// <param name="xArray">已有的圆的X数组</param>
/// <param name="yArray">已有的圆的Y数组</param>
/// <param name="rArray">已有的圆的R数组</param>
/// <returns></returns>
int creatRandCircle(int circleNum, float x, float y, int r, int xArray[100], int yArray[100], int rArray[100])
{
    int i;
    int isNewCircleOK=0;
       for (i = 0; i < circleNum; i++)   // 对已有圆遍历
            if (isTwoCirclesIntersect(xArray[i], yArray[i], rArray[i], x, y, r))
                break; // 如果已有圆和新圆相交,跳出循环，此时i<circleNum

        if (i == circleNum) // 如果上面for语句都不跳出，说明i等于circleNum
            isNewCircleOK = 1; //  这个新生成的圆和已有圆都不相交
    return  isNewCircleOK;
}
int  creatBigCircle(int rmax,int rmin, int circleNum, float x, float y, int xArray[100], int yArray[100], int rArray[100])
{
    int isNewCircleOK = 0;
    int j;
    int r = rmin;
    while (isNewCircleOK==0 && r<rmax) // 当不ok，并且新圆的半径小于最大半径时
	{
			r++; // 让半径+1
			for (j=0;j<circleNum;j++) // 对所有旧圆遍历
			{
				if (isTwoCirclesIntersect(xArray[j],yArray[j],rArray[j],x,y,r))
				{
					isNewCircleOK = 1; // 一旦和一个旧圆相交，这时新圆Ok
					break; // 因为新圆半径已经达到最大的情况，这时跳出循环
				}
			}
	}
    return  r;
}
void updateWindows(int width, int height)
{
    int xArray[1000]; // 数组存储所有圆心的x坐标
    int yArray[1000]; // 数组存储所有圆心的y坐标 
    int rArray[1000]; // 数组存储所有圆的半径 
    int rmin = 8; // 圆的最小半径
    int rmax = 50; // 圆的最大半径
    int circleNum = 0; // 生成的圆的个数
  //  float x, y, r; // 新增圆的圆心坐标、半径
    int isNewCircleOK = 0; // 用于判断新生成的圆是否可以了
    int i, j;
    int drawMode = 3; // 用于设定4种不同的绘制模式，开始设为3
    float x = 0;
    float y = 0;
    float r = 0;
    // int drawMode = 3;
    r = rmin; // 新圆的半径开始设为最小半径
    while (circleNum < 1000)
    {
        while (isNewCircleOK == 0)
        {
            x = rand() % width; // 新圆的圆心x坐标
            y = rand() % height; // 新圆的圆心y坐标
            int* f=ff(circleNum, drawMode);
            circleNum = *f++;
            drawMode = *f;
            isNewCircleOK = creatRandCircle(circleNum, x, y, rmin, xArray, yArray, rArray);
        }
        
        isNewCircleOK = 0;
        r = creatBigCircle(rmax, rmin,circleNum, x, y, xArray, yArray, rArray);

        xArray[circleNum] = x; // 把新圆的圆心坐标添加到数组中
        yArray[circleNum] = y; //
        rArray[circleNum] = r; // 把新圆的半径添加到数组中
        circleNum++; // 圆的个数+1

        // 根据不同绘图模式进行绘制		
        if (drawMode == 1)
            drawCircleMode1(x, y, r);
        if (drawMode == 2)
            drawCircleMode2(x, y, r);
        if (drawMode == 3)
            drawCircleMode3(x, y, r);
        if (drawMode == 4)
            drawCircleMode4(x, y, r);

        Sleep(10); // 暂停若干毫秒
    }

}
void drawCircleMode1(float x, float y, float r)
{
    setlinecolor(RGB(0, 0, 0));
    setfillcolor(RGB(255, 255, 0));
    fillcircle(x, y, r);
}
void drawCircleMode2(float x, float y, float r)
{
    float h = rand() % 360;
    COLORREF  color = HSVtoRGB(h, 0.6, 0.8);
    setlinecolor(RGB(255, 255, 255));
    setfillcolor(color);
    fillcircle(x, y, r);
}
void drawCircleMode3(float x, float y, float r)
{
    while (r > 0)
    {
        float h = rand() % 360;
        COLORREF  color = HSVtoRGB(h, 0.6, 0.8);
        setlinecolor(RGB(255, 255, 255));
        setfillcolor(color);
        fillcircle(x, y, r);
        r = r - 5;
    }
}
void drawCircleMode4(float x, float y, float r)
{
    while (r > 0)
    {
        float h = rand() % 360;
        COLORREF  color = HSVtoRGB(h, 0.9, 0.8);
        setlinecolor(color);
        circle(x, y, r);
        r = r - 5;
    }
}
float countTwoPointDis(float x1, float y1, float x2, float y2)
{
    float v = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    return sqrt(v);
}
bool isTwoCirclesIntersect(float x1, float y1, float r1, float x2, float y2, float r2)
{
    if (countTwoPointDis(x1, y1, x2, y2) < r1 + r2)
        return 1;
    return 0;
}
int*  ff(int circleNum,int drawMode)
{
    if (_kbhit()) // 当按键时
    {
        char input = _getch(); // 获得用户按键
        if (input == ' ') // 空格键
        {
            circleNum = 0; // 圆的个数为0，相当于画面清除所有已有的圆圈
            cleardevice(); // 清屏
            drawMode = drawMode + 1; // 进行下一种绘图模式
            if (drawMode > 4) // 如果大于4，重新回到第1种绘图模式
                drawMode = 1;
        }
    }
    int f[] = { circleNum ,drawMode };
    return f;
}


